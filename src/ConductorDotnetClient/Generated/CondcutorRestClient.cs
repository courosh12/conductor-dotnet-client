//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace ConductorDotnetClient.Swagger.Api
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IConductorRestClient
    {
        /// <summary>Get all the configuration parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetAllConfigAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all the configuration parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetAllConfigAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Queue up all the running workflows for sweep</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RequeueSweepAsync(string workflowId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Queue up all the running workflows for sweep</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RequeueSweepAsync(string workflowId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the list of pending tasks for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> ViewAsync(string tasktype, int? start, int? count);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of pending tasks for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> ViewAsync(string tasktype, int? start, int? count, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get all the event handlers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all the event handlers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Add a new event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddEventHandlerAsync(EventHandler body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a new event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddEventHandlerAsync(EventHandler body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an existing event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateEventHandlerAsync(EventHandler body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateEventHandlerAsync(EventHandler body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get registered queues</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetEventQueuesAsync(bool? verbose);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get registered queues</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetEventQueuesAsync(bool? verbose, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get registered queue providers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEventQueueProvidersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get registered queue providers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEventQueueProvidersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get event handlers for a given event</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersForEventAsync(string @event, bool? activeOnly);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get event handlers for a given event</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersForEventAsync(string @event, bool? activeOnly, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove an event handler</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveEventHandlerStatusAsync(string name);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove an event handler</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveEventHandlerStatusAsync(string name, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCheckStatus> DoCheckAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCheckStatus> DoCheckAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskDef>> GetTaskDefsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskDef>> GetTaskDefsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create new task definition(s)</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterTaskDefAsync(System.Collections.Generic.IEnumerable<TaskDef> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new task definition(s)</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterTaskDefAsync(System.Collections.Generic.IEnumerable<TaskDef> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update an existing task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterTaskDef2Async(TaskDef body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterTaskDef2Async(TaskDef body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskDef> GetTaskDefAsync(string tasktype);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskDef> GetTaskDefAsync(string tasktype, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove a task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnregisterTaskDefAsync(string tasktype);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove a task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnregisterTaskDefAsync(string tasktype, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves all workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowDef>> GetAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowDef>> GetAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create a new workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateAsync(WorkflowDef body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateAsync(WorkflowDef body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Create or update workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAsync(System.Collections.Generic.IEnumerable<WorkflowDef> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create or update workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateAsync(System.Collections.Generic.IEnumerable<WorkflowDef> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieves workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowDef> GetAsync(string name, int? version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowDef> GetAsync(string name, int? version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes workflow definition. It does not remove workflows associated with the definition.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnregisterWorkflowDefAsync(string name, int version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes workflow definition. It does not remove workflows associated with the definition.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnregisterWorkflowDefAsync(string name, int version, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Update a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateTaskAsync(TaskResult body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UpdateTaskAsync(TaskResult body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the external uri where the task payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocationAsync(string path, string operation, string payloadType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the external uri where the task payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocationAsync(string path, string operation, string payloadType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get in progress tasks. The results are paginated.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTasksAsync(string tasktype, string startKey, int? count);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get in progress tasks. The results are paginated.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTasksAsync(string tasktype, string startKey, int? count, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get in progress task for a given workflow id.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> GetPendingTaskForWorkflowAsync(string workflowId, string taskRefName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get in progress task for a given workflow id.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> GetPendingTaskForWorkflowAsync(string workflowId, string taskRefName, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>batch Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> BatchPollAsync(string tasktype, string workerid, string domain, int? count, int? timeout);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>batch Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> BatchPollAsync(string tasktype, string workerid, string domain, int? count, int? timeout, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> PollAsync(string tasktype, string workerid, string domain);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> PollAsync(string tasktype, string workerid, string domain, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> AllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> AllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>>>> AllVerboseAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>>>> AllVerboseAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the last poll data for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetPollDataAsync(string taskType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the last poll data for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetPollDataAsync(string taskType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the last poll data for all task types</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetAllPollDataAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the last poll data for all task types</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetAllPollDataAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Requeue pending tasks for all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RequeueAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Requeue pending tasks for all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RequeueAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Requeue pending tasks</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RequeuePendingTaskAsync(string taskType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Requeue pending tasks</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RequeuePendingTaskAsync(string taskType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Task type queue sizes</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, int>> SizeAsync(System.Collections.Generic.IEnumerable<string> taskType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Task type queue sizes</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, int>> SizeAsync(System.Collections.Generic.IEnumerable<string> taskType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Remove Task from a Task type queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveTaskFromQueueAsync(string taskType, string taskId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove Task from a Task type queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveTaskFromQueueAsync(string taskType, string taskId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for tasks based in payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultTaskSummary> SearchAsync(int? start, int? size, string sort, string freeText, string query);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for tasks based in payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultTaskSummary> SearchAsync(int? start, int? size, string sort, string freeText, string query, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get task by Id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> GetTaskAsync(string taskId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get task by Id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> GetTaskAsync(string taskId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Ack Task is received</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AckAsync(string taskId, string workerid);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Ack Task is received</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> AckAsync(string taskId, string workerid, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Task Execution Logs</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskExecLog>> GetTaskLogsAsync(string taskId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Task Execution Logs</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskExecLog>> GetTaskLogsAsync(string taskId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Log Task Execution Details</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LogAsync(string taskId, string body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Log Task Execution Details</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LogAsync(string taskId, string body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> StartWorkflowAsync(StartWorkflowRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> StartWorkflowAsync(StartWorkflowRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Pause the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> PauseWorkflowAsync(System.Collections.Generic.IEnumerable<string> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Pause the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> PauseWorkflowAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Restart the list of completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> RestartAsync(System.Collections.Generic.IEnumerable<string> body, bool? useLatestDefinitions);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restart the list of completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> RestartAsync(System.Collections.Generic.IEnumerable<string> body, bool? useLatestDefinitions, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resume the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> ResumeWorkflowAsync(System.Collections.Generic.IEnumerable<string> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resume the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> ResumeWorkflowAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retry the last failed task for each workflow from the list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> RetryAsync(System.Collections.Generic.IEnumerable<string> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retry the last failed task for each workflow from the list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> RetryAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Terminate workflows execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> TerminateAsync(System.Collections.Generic.IEnumerable<string> body, string reason);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Terminate workflows execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkResponse> TerminateAsync(System.Collections.Generic.IEnumerable<string> body, string reason, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Starts the decision task for a workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DecideAsync(string workflowId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Starts the decision task for a workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DecideAsync(string workflowId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the uri and path of the external storage where the workflow payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation2Async(string path, string operation, string payloadType);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the uri and path of the external storage where the workflow payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation2Async(string path, string operation, string payloadType, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retrieve all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRunningWorkflowAsync(string name, int? version, long? startTime, long? endTime);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRunningWorkflowAsync(string name, int? version, long? startTime, long? endTime, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for workflows based on payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultWorkflowSummary> Search2Async(int? start, int? size, string sort, string freeText, string query);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for workflows based on payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultWorkflowSummary> Search2Async(int? start, int? size, string sort, string freeText, string query, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Search for workflows based on task parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchWorkflowsByTasksAsync(int? start, int? size, string sort, string freeText, string query);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for workflows based on task parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchWorkflowsByTasksAsync(int? start, int? size, string sort, string freeText, string query, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> StartWorkflow2Async(string name, int? version, string correlationId, int? priority, System.Collections.Generic.IDictionary<string, object> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> StartWorkflow2Async(string name, int? version, string correlationId, int? priority, System.Collections.Generic.IDictionary<string, object> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Lists workflows for the given correlation id list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Workflow>>> GetWorkflowsAsync(string name, bool? includeClosed, bool? includeTasks, System.Collections.Generic.IEnumerable<string> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists workflows for the given correlation id list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Workflow>>> GetWorkflowsAsync(string name, bool? includeClosed, bool? includeTasks, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Lists workflows for the given correlation id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Workflow>> GetWorkflowsAllAsync(string name, string correlationId, bool? includeClosed, bool? includeTasks);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists workflows for the given correlation id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Workflow>> GetWorkflowsAllAsync(string name, string correlationId, bool? includeClosed, bool? includeTasks, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the workflow by workflow id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Workflow> GetExecutionStatusAsync(string workflowId, bool? includeTasks);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workflow by workflow id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Workflow> GetExecutionStatusAsync(string workflowId, bool? includeTasks, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Terminate workflow execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Terminate2Async(string workflowId, string reason);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Terminate workflow execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Terminate2Async(string workflowId, string reason, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Pauses the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseWorkflow2Async(string workflowId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Pauses the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseWorkflow2Async(string workflowId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes the workflow from the system</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string workflowId, bool? archiveWorkflow);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes the workflow from the system</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string workflowId, bool? archiveWorkflow, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Reruns the workflow from a specific task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RerunAsync(string workflowId, RerunWorkflowRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reruns the workflow from a specific task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> RerunAsync(string workflowId, RerunWorkflowRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resets callback times of all in_progress tasks to 0</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetWorkflowAsync(string workflowId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resets callback times of all in_progress tasks to 0</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetWorkflowAsync(string workflowId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Restarts a completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Restart2Async(string workflowId, bool? useLatestDefinitions);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restarts a completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Restart2Async(string workflowId, bool? useLatestDefinitions, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Resumes the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeWorkflow2Async(string workflowId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resumes the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResumeWorkflow2Async(string workflowId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Retries the last failed task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Retry2Async(string workflowId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retries the last failed task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Retry2Async(string workflowId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Skips a given task from a current running workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SkipTaskFromWorkflowAsync(string workflowId, string taskReferenceName, SkipTaskRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Skips a given task from a current running workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SkipTaskFromWorkflowAsync(string workflowId, string taskReferenceName, SkipTaskRequest body, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConductorRestClient : IConductorRestClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ConductorRestClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get all the configuration parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetAllConfigAsync()
        {
            return GetAllConfigAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all the configuration parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetAllConfigAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/config");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.IDictionary<string, object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Queue up all the running workflows for sweep</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> RequeueSweepAsync(string workflowId)
        {
            return RequeueSweepAsync(workflowId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Queue up all the running workflows for sweep</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> RequeueSweepAsync(string workflowId, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/sweep/requeue/{workflowId}");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "text/plain");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the list of pending tasks for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> ViewAsync(string tasktype, int? start, int? count)
        {
            return ViewAsync(tasktype, start, count, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of pending tasks for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> ViewAsync(string tasktype, int? start, int? count, System.Threading.CancellationToken cancellationToken)
        {
            if (tasktype == null)
                throw new System.ArgumentNullException("tasktype");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/task/{tasktype}?");
            urlBuilder_.Replace("{tasktype}", System.Uri.EscapeDataString(ConvertToString(tasktype, System.Globalization.CultureInfo.InvariantCulture)));
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Task>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Task>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get all the event handlers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersAsync()
        {
            return GetEventHandlersAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all the event handlers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventHandler>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<EventHandler>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Add a new event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddEventHandlerAsync(EventHandler body)
        {
            return AddEventHandlerAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add a new event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddEventHandlerAsync(EventHandler body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update an existing event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateEventHandlerAsync(EventHandler body)
        {
            return UpdateEventHandlerAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing event handler.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateEventHandlerAsync(EventHandler body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get registered queues</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetEventQueuesAsync(bool? verbose)
        {
            return GetEventQueuesAsync(verbose, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get registered queues</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GetEventQueuesAsync(bool? verbose, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event/queues?");
            if (verbose != null) 
            {
                urlBuilder_.Append("verbose=").Append(System.Uri.EscapeDataString(ConvertToString(verbose, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.IDictionary<string, object>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get registered queue providers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEventQueueProvidersAsync()
        {
            return GetEventQueueProvidersAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get registered queue providers</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetEventQueueProvidersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event/queues/providers");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get event handlers for a given event</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersForEventAsync(string @event, bool? activeOnly)
        {
            return GetEventHandlersForEventAsync(@event, activeOnly, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get event handlers for a given event</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventHandler>> GetEventHandlersForEventAsync(string @event, bool? activeOnly, System.Threading.CancellationToken cancellationToken)
        {
            if (@event == null)
                throw new System.ArgumentNullException("@event");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event/{event}?");
            urlBuilder_.Replace("{event}", System.Uri.EscapeDataString(ConvertToString(@event, System.Globalization.CultureInfo.InvariantCulture)));
            if (activeOnly != null) 
            {
                urlBuilder_.Append("activeOnly=").Append(System.Uri.EscapeDataString(ConvertToString(activeOnly, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EventHandler>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<EventHandler>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Remove an event handler</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveEventHandlerStatusAsync(string name)
        {
            return RemoveEventHandlerStatusAsync(name, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove an event handler</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveEventHandlerStatusAsync(string name, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/event/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HealthCheckStatus> DoCheckAsync()
        {
            return DoCheckAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HealthCheckStatus> DoCheckAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/health");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HealthCheckStatus>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(HealthCheckStatus);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets all task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskDef>> GetTaskDefsAsync()
        {
            return GetTaskDefsAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskDef>> GetTaskDefsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/taskdefs");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TaskDef>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<TaskDef>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create new task definition(s)</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RegisterTaskDefAsync(System.Collections.Generic.IEnumerable<TaskDef> body)
        {
            return RegisterTaskDefAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create new task definition(s)</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RegisterTaskDefAsync(System.Collections.Generic.IEnumerable<TaskDef> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/taskdefs");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update an existing task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RegisterTaskDef2Async(TaskDef body)
        {
            return RegisterTaskDef2Async(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RegisterTaskDef2Async(TaskDef body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/taskdefs");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TaskDef> GetTaskDefAsync(string tasktype)
        {
            return GetTaskDefAsync(tasktype, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskDef> GetTaskDefAsync(string tasktype, System.Threading.CancellationToken cancellationToken)
        {
            if (tasktype == null)
                throw new System.ArgumentNullException("tasktype");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/taskdefs/{tasktype}");
            urlBuilder_.Replace("{tasktype}", System.Uri.EscapeDataString(ConvertToString(tasktype, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskDef>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskDef);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Remove a task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UnregisterTaskDefAsync(string tasktype)
        {
            return UnregisterTaskDefAsync(tasktype, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove a task definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UnregisterTaskDefAsync(string tasktype, System.Threading.CancellationToken cancellationToken)
        {
            if (tasktype == null)
                throw new System.ArgumentNullException("tasktype");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/taskdefs/{tasktype}");
            urlBuilder_.Replace("{tasktype}", System.Uri.EscapeDataString(ConvertToString(tasktype, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves all workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowDef>> GetAllAsync()
        {
            return GetAllAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves all workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowDef>> GetAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/workflow");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WorkflowDef>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<WorkflowDef>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create a new workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task CreateAsync(WorkflowDef body)
        {
            return CreateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a new workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreateAsync(WorkflowDef body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/workflow");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Create or update workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateAsync(System.Collections.Generic.IEnumerable<WorkflowDef> body)
        {
            return UpdateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create or update workflow definition</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateAsync(System.Collections.Generic.IEnumerable<WorkflowDef> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/workflow");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieves workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WorkflowDef> GetAsync(string name, int? version)
        {
            return GetAsync(name, version, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieves workflow definition along with blueprint</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WorkflowDef> GetAsync(string name, int? version, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/workflow/{name}?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (version != null) 
            {
                urlBuilder_.Append("version=").Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowDef>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WorkflowDef);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Removes workflow definition. It does not remove workflows associated with the definition.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UnregisterWorkflowDefAsync(string name, int version)
        {
            return UnregisterWorkflowDefAsync(name, version, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes workflow definition. It does not remove workflows associated with the definition.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UnregisterWorkflowDefAsync(string name, int version, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            if (version == null)
                throw new System.ArgumentNullException("version");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/metadata/workflow/{name}/{version}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{version}", System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Update a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> UpdateTaskAsync(TaskResult body)
        {
            return UpdateTaskAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update a task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> UpdateTaskAsync(TaskResult body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the external uri where the task payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocationAsync(string path, string operation, string payloadType)
        {
            return GetExternalStorageLocationAsync(path, operation, payloadType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the external uri where the task payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocationAsync(string path, string operation, string payloadType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/externalstoragelocation?");
            if (path != null) 
            {
                urlBuilder_.Append("path=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operation != null) 
            {
                urlBuilder_.Append("operation=").Append(System.Uri.EscapeDataString(ConvertToString(operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payloadType != null) 
            {
                urlBuilder_.Append("payloadType=").Append(System.Uri.EscapeDataString(ConvertToString(payloadType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExternalStorageLocation>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ExternalStorageLocation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get in progress tasks. The results are paginated.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTasksAsync(string tasktype, string startKey, int? count)
        {
            return GetTasksAsync(tasktype, startKey, count, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get in progress tasks. The results are paginated.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTasksAsync(string tasktype, string startKey, int? count, System.Threading.CancellationToken cancellationToken)
        {
            if (tasktype == null)
                throw new System.ArgumentNullException("tasktype");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/in_progress/{tasktype}?");
            urlBuilder_.Replace("{tasktype}", System.Uri.EscapeDataString(ConvertToString(tasktype, System.Globalization.CultureInfo.InvariantCulture)));
            if (startKey != null) 
            {
                urlBuilder_.Append("startKey=").Append(System.Uri.EscapeDataString(ConvertToString(startKey, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Task>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Task>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get in progress task for a given workflow id.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Task> GetPendingTaskForWorkflowAsync(string workflowId, string taskRefName)
        {
            return GetPendingTaskForWorkflowAsync(workflowId, taskRefName, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get in progress task for a given workflow id.</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Task> GetPendingTaskForWorkflowAsync(string workflowId, string taskRefName, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            if (taskRefName == null)
                throw new System.ArgumentNullException("taskRefName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/in_progress/{workflowId}/{taskRefName}");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{taskRefName}", System.Uri.EscapeDataString(ConvertToString(taskRefName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Task>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Task);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>batch Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> BatchPollAsync(string tasktype, string workerid, string domain, int? count, int? timeout)
        {
            return BatchPollAsync(tasktype, workerid, domain, count, timeout, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>batch Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> BatchPollAsync(string tasktype, string workerid, string domain, int? count, int? timeout, System.Threading.CancellationToken cancellationToken)
        {
            if (tasktype == null)
                throw new System.ArgumentNullException("tasktype");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/poll/batch/{tasktype}?");
            urlBuilder_.Replace("{tasktype}", System.Uri.EscapeDataString(ConvertToString(tasktype, System.Globalization.CultureInfo.InvariantCulture)));
            if (workerid != null) 
            {
                urlBuilder_.Append("workerid=").Append(System.Uri.EscapeDataString(ConvertToString(workerid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (domain != null) 
            {
                urlBuilder_.Append("domain=").Append(System.Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (count != null) 
            {
                urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(ConvertToString(count, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (timeout != null) 
            {
                urlBuilder_.Append("timeout=").Append(System.Uri.EscapeDataString(ConvertToString(timeout, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Task>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Task>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Task> PollAsync(string tasktype, string workerid, string domain)
        {
            return PollAsync(tasktype, workerid, domain, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Poll for a task of a certain type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Task> PollAsync(string tasktype, string workerid, string domain, System.Threading.CancellationToken cancellationToken)
        {
            if (tasktype == null)
                throw new System.ArgumentNullException("tasktype");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/poll/{tasktype}?");
            urlBuilder_.Replace("{tasktype}", System.Uri.EscapeDataString(ConvertToString(tasktype, System.Globalization.CultureInfo.InvariantCulture)));
            if (workerid != null) 
            {
                urlBuilder_.Append("workerid=").Append(System.Uri.EscapeDataString(ConvertToString(workerid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (domain != null) 
            {
                urlBuilder_.Append("domain=").Append(System.Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Task>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Task);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> AllAsync()
        {
            return AllAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> AllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/all");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, long>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.IDictionary<string, long>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>>>> AllVerboseAsync()
        {
            return AllVerboseAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the details about each queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>>>> AllVerboseAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/all/verbose");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>>>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, long>>>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the last poll data for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetPollDataAsync(string taskType)
        {
            return GetPollDataAsync(taskType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the last poll data for a given task type</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetPollDataAsync(string taskType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/polldata?");
            if (taskType != null) 
            {
                urlBuilder_.Append("taskType=").Append(System.Uri.EscapeDataString(ConvertToString(taskType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PollData>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<PollData>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the last poll data for all task types</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetAllPollDataAsync()
        {
            return GetAllPollDataAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the last poll data for all task types</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PollData>> GetAllPollDataAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/polldata/all");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PollData>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<PollData>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Requeue pending tasks for all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> RequeueAsync()
        {
            return RequeueAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Requeue pending tasks for all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> RequeueAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/requeue");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Requeue pending tasks</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> RequeuePendingTaskAsync(string taskType)
        {
            return RequeuePendingTaskAsync(taskType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Requeue pending tasks</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> RequeuePendingTaskAsync(string taskType, System.Threading.CancellationToken cancellationToken)
        {
            if (taskType == null)
                throw new System.ArgumentNullException("taskType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/requeue/{taskType}");
            urlBuilder_.Replace("{taskType}", System.Uri.EscapeDataString(ConvertToString(taskType, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Task type queue sizes</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, int>> SizeAsync(System.Collections.Generic.IEnumerable<string> taskType)
        {
            return SizeAsync(taskType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Task type queue sizes</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, int>> SizeAsync(System.Collections.Generic.IEnumerable<string> taskType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/sizes?");
            if (taskType != null) 
            {
                foreach (var item_ in taskType) { urlBuilder_.Append("taskType=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, int>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.IDictionary<string, int>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Remove Task from a Task type queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveTaskFromQueueAsync(string taskType, string taskId)
        {
            return RemoveTaskFromQueueAsync(taskType, taskId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove Task from a Task type queue</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveTaskFromQueueAsync(string taskType, string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskType == null)
                throw new System.ArgumentNullException("taskType");
    
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/queue/{taskType}/{taskId}");
            urlBuilder_.Replace("{taskType}", System.Uri.EscapeDataString(ConvertToString(taskType, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Search for tasks based in payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResultTaskSummary> SearchAsync(int? start, int? size, string sort, string freeText, string query)
        {
            return SearchAsync(start, size, sort, freeText, query, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for tasks based in payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchResultTaskSummary> SearchAsync(int? start, int? size, string sort, string freeText, string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/search?");
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null) 
            {
                urlBuilder_.Append("size=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (freeText != null) 
            {
                urlBuilder_.Append("freeText=").Append(System.Uri.EscapeDataString(ConvertToString(freeText, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null) 
            {
                urlBuilder_.Append("query=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResultTaskSummary>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResultTaskSummary);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get task by Id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Task> GetTaskAsync(string taskId)
        {
            return GetTaskAsync(taskId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get task by Id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Task> GetTaskAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/{taskId}");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Task>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Task);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Ack Task is received</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> AckAsync(string taskId, string workerid)
        {
            return AckAsync(taskId, workerid, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Ack Task is received</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> AckAsync(string taskId, string workerid, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/{taskId}/ack?");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
            if (workerid != null) 
            {
                urlBuilder_.Append("workerid=").Append(System.Uri.EscapeDataString(ConvertToString(workerid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Task Execution Logs</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskExecLog>> GetTaskLogsAsync(string taskId)
        {
            return GetTaskLogsAsync(taskId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Task Execution Logs</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskExecLog>> GetTaskLogsAsync(string taskId, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/{taskId}/log");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TaskExecLog>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<TaskExecLog>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Log Task Execution Details</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task LogAsync(string taskId, string body)
        {
            return LogAsync(taskId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Log Task Execution Details</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task LogAsync(string taskId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (taskId == null)
                throw new System.ArgumentNullException("taskId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/tasks/{taskId}/log");
            urlBuilder_.Replace("{taskId}", System.Uri.EscapeDataString(ConvertToString(taskId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> StartWorkflowAsync(StartWorkflowRequest body)
        {
            return StartWorkflowAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a new workflow with StartWorkflowRequest, which allows task to be executed in a domain</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> StartWorkflowAsync(StartWorkflowRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Pause the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BulkResponse> PauseWorkflowAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return PauseWorkflowAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Pause the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BulkResponse> PauseWorkflowAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/bulk/pause");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BulkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Restart the list of completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BulkResponse> RestartAsync(System.Collections.Generic.IEnumerable<string> body, bool? useLatestDefinitions)
        {
            return RestartAsync(body, useLatestDefinitions, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restart the list of completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BulkResponse> RestartAsync(System.Collections.Generic.IEnumerable<string> body, bool? useLatestDefinitions, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/bulk/restart?");
            if (useLatestDefinitions != null) 
            {
                urlBuilder_.Append("useLatestDefinitions=").Append(System.Uri.EscapeDataString(ConvertToString(useLatestDefinitions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BulkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resume the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BulkResponse> ResumeWorkflowAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return ResumeWorkflowAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resume the list of workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BulkResponse> ResumeWorkflowAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/bulk/resume");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BulkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retry the last failed task for each workflow from the list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BulkResponse> RetryAsync(System.Collections.Generic.IEnumerable<string> body)
        {
            return RetryAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retry the last failed task for each workflow from the list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BulkResponse> RetryAsync(System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/bulk/retry");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BulkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Terminate workflows execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BulkResponse> TerminateAsync(System.Collections.Generic.IEnumerable<string> body, string reason)
        {
            return TerminateAsync(body, reason, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Terminate workflows execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BulkResponse> TerminateAsync(System.Collections.Generic.IEnumerable<string> body, string reason, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/bulk/terminate?");
            if (reason != null) 
            {
                urlBuilder_.Append("reason=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BulkResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Starts the decision task for a workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DecideAsync(string workflowId)
        {
            return DecideAsync(workflowId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Starts the decision task for a workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DecideAsync(string workflowId, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/decide/{workflowId}");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get the uri and path of the external storage where the workflow payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation2Async(string path, string operation, string payloadType)
        {
            return GetExternalStorageLocation2Async(path, operation, payloadType, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the uri and path of the external storage where the workflow payload is to be stored</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExternalStorageLocation> GetExternalStorageLocation2Async(string path, string operation, string payloadType, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/externalstoragelocation?");
            if (path != null) 
            {
                urlBuilder_.Append("path=").Append(System.Uri.EscapeDataString(ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (operation != null) 
            {
                urlBuilder_.Append("operation=").Append(System.Uri.EscapeDataString(ConvertToString(operation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (payloadType != null) 
            {
                urlBuilder_.Append("payloadType=").Append(System.Uri.EscapeDataString(ConvertToString(payloadType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExternalStorageLocation>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ExternalStorageLocation);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retrieve all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRunningWorkflowAsync(string name, int? version, long? startTime, long? endTime)
        {
            return GetRunningWorkflowAsync(name, version, startTime, endTime, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve all the running workflows</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetRunningWorkflowAsync(string name, int? version, long? startTime, long? endTime, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/running/{name}?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (version != null) 
            {
                urlBuilder_.Append("version=").Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startTime != null) 
            {
                urlBuilder_.Append("startTime=").Append(System.Uri.EscapeDataString(ConvertToString(startTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endTime != null) 
            {
                urlBuilder_.Append("endTime=").Append(System.Uri.EscapeDataString(ConvertToString(endTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<string>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Search for workflows based on payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResultWorkflowSummary> Search2Async(int? start, int? size, string sort, string freeText, string query)
        {
            return Search2Async(start, size, sort, freeText, query, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for workflows based on payload and other parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchResultWorkflowSummary> Search2Async(int? start, int? size, string sort, string freeText, string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/search?");
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null) 
            {
                urlBuilder_.Append("size=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (freeText != null) 
            {
                urlBuilder_.Append("freeText=").Append(System.Uri.EscapeDataString(ConvertToString(freeText, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null) 
            {
                urlBuilder_.Append("query=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResultWorkflowSummary>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResultWorkflowSummary);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Search for workflows based on task parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchWorkflowsByTasksAsync(int? start, int? size, string sort, string freeText, string query)
        {
            return SearchWorkflowsByTasksAsync(start, size, sort, freeText, query, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for workflows based on task parameters</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchResultWorkflowSummary> SearchWorkflowsByTasksAsync(int? start, int? size, string sort, string freeText, string query, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/search-by-tasks?");
            if (start != null) 
            {
                urlBuilder_.Append("start=").Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (size != null) 
            {
                urlBuilder_.Append("size=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sort != null) 
            {
                urlBuilder_.Append("sort=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (freeText != null) 
            {
                urlBuilder_.Append("freeText=").Append(System.Uri.EscapeDataString(ConvertToString(freeText, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query != null) 
            {
                urlBuilder_.Append("query=").Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResultWorkflowSummary>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchResultWorkflowSummary);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> StartWorkflow2Async(string name, int? version, string correlationId, int? priority, System.Collections.Generic.IDictionary<string, object> body)
        {
            return StartWorkflow2Async(name, version, correlationId, priority, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a new workflow. Returns the ID of the workflow instance that can be later used for tracking</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> StartWorkflow2Async(string name, int? version, string correlationId, int? priority, System.Collections.Generic.IDictionary<string, object> body, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{name}?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (version != null) 
            {
                urlBuilder_.Append("version=").Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (correlationId != null) 
            {
                urlBuilder_.Append("correlationId=").Append(System.Uri.EscapeDataString(ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (priority != null) 
            {
                urlBuilder_.Append("priority=").Append(System.Uri.EscapeDataString(ConvertToString(priority, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Lists workflows for the given correlation id list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Workflow>>> GetWorkflowsAsync(string name, bool? includeClosed, bool? includeTasks, System.Collections.Generic.IEnumerable<string> body)
        {
            return GetWorkflowsAsync(name, includeClosed, includeTasks, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists workflows for the given correlation id list</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Workflow>>> GetWorkflowsAsync(string name, bool? includeClosed, bool? includeTasks, System.Collections.Generic.IEnumerable<string> body, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{name}/correlated?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeClosed != null) 
            {
                urlBuilder_.Append("includeClosed=").Append(System.Uri.EscapeDataString(ConvertToString(includeClosed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeTasks != null) 
            {
                urlBuilder_.Append("includeTasks=").Append(System.Uri.EscapeDataString(ConvertToString(includeTasks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Workflow>>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Workflow>>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Lists workflows for the given correlation id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Workflow>> GetWorkflowsAllAsync(string name, string correlationId, bool? includeClosed, bool? includeTasks)
        {
            return GetWorkflowsAllAsync(name, correlationId, includeClosed, includeTasks, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists workflows for the given correlation id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Workflow>> GetWorkflowsAllAsync(string name, string correlationId, bool? includeClosed, bool? includeTasks, System.Threading.CancellationToken cancellationToken)
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            if (correlationId == null)
                throw new System.ArgumentNullException("correlationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{name}/correlated/{correlationId}?");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{correlationId}", System.Uri.EscapeDataString(ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeClosed != null) 
            {
                urlBuilder_.Append("includeClosed=").Append(System.Uri.EscapeDataString(ConvertToString(includeClosed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeTasks != null) 
            {
                urlBuilder_.Append("includeTasks=").Append(System.Uri.EscapeDataString(ConvertToString(includeTasks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Workflow>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Workflow>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets the workflow by workflow id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Workflow> GetExecutionStatusAsync(string workflowId, bool? includeTasks)
        {
            return GetExecutionStatusAsync(workflowId, includeTasks, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workflow by workflow id</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Workflow> GetExecutionStatusAsync(string workflowId, bool? includeTasks, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}?");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
            if (includeTasks != null) 
            {
                urlBuilder_.Append("includeTasks=").Append(System.Uri.EscapeDataString(ConvertToString(includeTasks, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Workflow>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Workflow);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Terminate workflow execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Terminate2Async(string workflowId, string reason)
        {
            return Terminate2Async(workflowId, reason, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Terminate workflow execution</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Terminate2Async(string workflowId, string reason, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}?");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
            if (reason != null) 
            {
                urlBuilder_.Append("reason=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Pauses the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PauseWorkflow2Async(string workflowId)
        {
            return PauseWorkflow2Async(workflowId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Pauses the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PauseWorkflow2Async(string workflowId, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/pause");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Removes the workflow from the system</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteAsync(string workflowId, bool? archiveWorkflow)
        {
            return DeleteAsync(workflowId, archiveWorkflow, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes the workflow from the system</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteAsync(string workflowId, bool? archiveWorkflow, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/remove?");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
            if (archiveWorkflow != null) 
            {
                urlBuilder_.Append("archiveWorkflow=").Append(System.Uri.EscapeDataString(ConvertToString(archiveWorkflow, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Reruns the workflow from a specific task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> RerunAsync(string workflowId, RerunWorkflowRequest body)
        {
            return RerunAsync(workflowId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reruns the workflow from a specific task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> RerunAsync(string workflowId, RerunWorkflowRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/rerun");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ConductorRestException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resets callback times of all in_progress tasks to 0</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ResetWorkflowAsync(string workflowId)
        {
            return ResetWorkflowAsync(workflowId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resets callback times of all in_progress tasks to 0</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ResetWorkflowAsync(string workflowId, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/resetcallbacks");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Restarts a completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Restart2Async(string workflowId, bool? useLatestDefinitions)
        {
            return Restart2Async(workflowId, useLatestDefinitions, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Restarts a completed workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Restart2Async(string workflowId, bool? useLatestDefinitions, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/restart?");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
            if (useLatestDefinitions != null) 
            {
                urlBuilder_.Append("useLatestDefinitions=").Append(System.Uri.EscapeDataString(ConvertToString(useLatestDefinitions, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Resumes the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ResumeWorkflow2Async(string workflowId)
        {
            return ResumeWorkflow2Async(workflowId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Resumes the workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ResumeWorkflow2Async(string workflowId, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/resume");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Retries the last failed task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Retry2Async(string workflowId)
        {
            return Retry2Async(workflowId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retries the last failed task</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Retry2Async(string workflowId, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/retry");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Skips a given task from a current running workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SkipTaskFromWorkflowAsync(string workflowId, string taskReferenceName, SkipTaskRequest body)
        {
            return SkipTaskFromWorkflowAsync(workflowId, taskReferenceName, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Skips a given task from a current running workflow</summary>
        /// <returns>successful operation</returns>
        /// <exception cref="ConductorRestException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SkipTaskFromWorkflowAsync(string workflowId, string taskReferenceName, SkipTaskRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (workflowId == null)
                throw new System.ArgumentNullException("workflowId");
    
            if (taskReferenceName == null)
                throw new System.ArgumentNullException("taskReferenceName");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/workflow/{workflowId}/skiptask/{taskReferenceName}");
            urlBuilder_.Replace("{workflowId}", System.Uri.EscapeDataString(ConvertToString(workflowId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{taskReferenceName}", System.Uri.EscapeDataString(ConvertToString(taskReferenceName, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ConductorRestException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ConductorRestException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowSummary 
    {
        [Newtonsoft.Json.JsonProperty("workflowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowSummaryStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input { get; set; }
    
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Output { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonForIncompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonForIncompletion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("executionTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExecutionTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("failedReferenceTaskNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FailedReferenceTaskNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalInputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalInputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InputSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OutputSize { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Task 
    {
        [Newtonsoft.Json.JsonProperty("taskType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> InputData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceTaskName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceTaskName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("retryCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetryCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("seq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Seq { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pollCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PollCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskDefName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ScheduledTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EndTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startDelayInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartDelayInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("retriedTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RetriedTaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("retried", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Retried { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("executed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Executed { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("callbackFromWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CallbackFromWorker { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("responseTimeoutSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ResponseTimeoutSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowInstanceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonForIncompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonForIncompletion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("callbackAfterSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CallbackAfterSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> OutputData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowTask WorkflowTask { get; set; }
    
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any InputMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any OutputMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateLimitPerFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RateLimitPerFrequency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateLimitFrequencyInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RateLimitFrequencyInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalInputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalInputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkflowPriority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("executionNameSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionNameSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isolationGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsolationGroupId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskDef TaskDefinition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queueWaitTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? QueueWaitTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskStatus2? TaskStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserServiceOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ByteString 
    {
        [Newtonsoft.Json.JsonProperty("validUtf8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidUtf8 { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Empty { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserOneofOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FieldOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("ctype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldOptionsCtype? Ctype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserFieldOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Packed { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weak", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Weak { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("lazy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Lazy { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("jstype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldOptionsJstype? Jstype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserEnumOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UninterpretedOption 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString StringValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("doubleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DoubleValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserUninterpretedOption ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UninterpretedOption DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NamePartOrBuilder> NameOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifierValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifierValueBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString IdentifierValueBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positiveIntValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PositiveIntValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("negativeIntValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NegativeIntValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregateValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregateValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregateValueBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString AggregateValueBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NamePart> NameList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NameCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MethodOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserMethodOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MethodOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idempotencyLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MethodOptionsIdempotencyLevel? IdempotencyLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserAny 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubWorkflowParams 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskToDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> TaskToDomain { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ServiceDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MethodDescriptor> Methods { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskDetails 
    {
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskRefName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskRefName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Output { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any OutputMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserEnumValueOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserMethodOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowDef 
    {
        [Newtonsoft.Json.JsonProperty("ownerApp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerApp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CreateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTask> Tasks { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTask>();
    
        [Newtonsoft.Json.JsonProperty("inputParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InputParameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> OutputParameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("failureWorkflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FailureWorkflow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2, 2)]
        public int? SchemaVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("restartable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restartable { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("workflowStatusListenerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkflowStatusListenerEnabled { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnumOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserEnumOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allowAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowAlias { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SkipTaskRequest 
    {
        [Newtonsoft.Json.JsonProperty("taskInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> TaskInput { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskOutput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> TaskOutput { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskInputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any TaskInputMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskOutputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any TaskOutputMessage { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PollData 
    {
        [Newtonsoft.Json.JsonProperty("queueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastPollTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LastPollTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Workflow 
    {
        [Newtonsoft.Json.JsonProperty("ownerApp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerApp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CreateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EndTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentWorkflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentWorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentWorkflowTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentWorkflowTaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Task> Tasks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Input { get; set; }
    
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Output { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reRunFromWorkflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReRunFromWorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonForIncompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonForIncompletion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SchemaVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskToDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> TaskToDomain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("failedReferenceTaskNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FailedReferenceTaskNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowDef WorkflowDefinition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalInputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalInputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 99)]
        public int? Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkflowVersion { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnumDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor ContainingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnumValueDescriptor> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamePartOrBuilder 
    {
        [Newtonsoft.Json.JsonProperty("namePart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamePart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namePartBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString NamePartBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExtension { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Parser 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserNamePart 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamePart 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namePart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamePart1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("namePartBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString NamePartBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExtension { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserNamePart ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NamePart DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskDef 
    {
        [Newtonsoft.Json.JsonProperty("ownerApp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerApp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CreateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updatedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("retryCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? RetryCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeoutSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TimeoutSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InputKeys { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutputKeys { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeoutPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskDefTimeoutPolicy? TimeoutPolicy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("retryLogic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskDefRetryLogic? RetryLogic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("retryDelaySeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetryDelaySeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("responseTimeoutSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1.0D, int.MaxValue)]
        public long? ResponseTimeoutSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("concurrentExecLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConcurrentExecLimit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> InputTemplate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateLimitPerFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RateLimitPerFrequency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateLimitFrequencyInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RateLimitFrequencyInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isolationGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsolationGroupId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("executionNameSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExecutionNameSpace { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Descriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor ContainingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nestedTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Descriptor> NestedTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("enumTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnumDescriptor> EnumTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldDescriptor> Fields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldDescriptor> Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oneofs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OneofDescriptor> Oneofs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extendable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extendable { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskResult 
    {
        [Newtonsoft.Json.JsonProperty("workflowInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowInstanceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonForIncompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonForIncompletion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("callbackAfterSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CallbackAfterSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskResultStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> OutputData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any OutputMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaskExecLog> Logs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputPayloadStoragePath { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserMessageOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchResultWorkflowSummary 
    {
        [Newtonsoft.Json.JsonProperty("totalHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalHits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowSummary> Results { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserServiceOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnknownFieldSet 
    {
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parser ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serializedSizeAsMessageSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSizeAsMessageSet { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HealthCheckStatus 
    {
        [Newtonsoft.Json.JsonProperty("healthResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Health> HealthResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("suppressedHealthResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Health> SuppressedHealthResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("healthy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Healthy { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnumValueOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserEnumValueOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumValueOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Action 
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Action1? Action1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start_workflow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartWorkflow Start_workflow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("complete_task", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskDetails Complete_task { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fail_task", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskDetails Fail_task { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expandInlineJSON", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpandInlineJSON { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Message 
    {
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserMessage ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageLite DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskExecLog 
    {
        [Newtonsoft.Json.JsonProperty("log", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Log { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CreatedTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserMessage 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventHandler 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("condition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Condition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Action> Actions { get; set; } = new System.Collections.ObjectModel.Collection<Action>();
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowTask 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskReferenceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskReferenceName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> InputParameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dynamicTaskNameParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DynamicTaskNameParam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseValueParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseValueParam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("caseExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaseExpression { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scriptExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScriptExpression { get; set; }
    
        [Newtonsoft.Json.JsonProperty("decisionCases", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<WorkflowTask>> DecisionCases { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dynamicForkJoinTasksParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DynamicForkJoinTasksParam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dynamicForkTasksParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DynamicForkTasksParam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dynamicForkTasksInputParamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DynamicForkTasksInputParamName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTask> DefaultCase { get; set; }
    
        [Newtonsoft.Json.JsonProperty("forkTasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<WorkflowTask>> ForkTasks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startDelay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartDelay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subWorkflowParam", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubWorkflowParams SubWorkflowParam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("joinOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JoinOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Optional { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("taskDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskDef TaskDefinition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateLimited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RateLimited { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("defaultExclusiveJoinTask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefaultExclusiveJoinTask { get; set; }
    
        [Newtonsoft.Json.JsonProperty("asyncComplete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AsyncComplete { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Any 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typeUrlBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString TypeUrlBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserAny ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("typeUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FieldDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("jsonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensionScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor ExtensionScope { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldDescriptorType? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor ContainingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor MessageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containingOneof", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OneofDescriptor ContainingOneof { get; set; }
    
        [Newtonsoft.Json.JsonProperty("enumType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumDescriptor EnumType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("liteJavaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldDescriptorLiteJavaType? LiteJavaType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("packable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Packable { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("liteType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldDescriptorLiteType? LiteType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Extension { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("mapField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MapField { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Optional { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("packed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Packed { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("repeated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Repeated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("javaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldDescriptorJavaType? JavaType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserMessageLite 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StartWorkflowRequest 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Input { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskToDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> TaskToDomain { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowDef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowDef WorkflowDef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalInputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalInputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 99)]
        public int? Priority { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("messageSetWireFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessageSetWireFormat { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserMessageOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mapEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MapEntry { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("noStandardDescriptorAccessor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoStandardDescriptorAccessor { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserFileOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnumValueDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumDescriptor Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnumValueOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserFieldOptions 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UninterpretedOptionOrBuilder 
    {
        [Newtonsoft.Json.JsonProperty("stringValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString StringValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("doubleValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DoubleValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NamePartOrBuilder> NameOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifierValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentifierValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifierValueBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString IdentifierValueBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positiveIntValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PositiveIntValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("negativeIntValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? NegativeIntValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregateValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregateValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregateValueBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString AggregateValueBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NamePart> NameList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NameCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Message DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Health 
    {
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Details { get; set; }
    
        [Newtonsoft.Json.JsonProperty("healthy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Healthy { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BulkResponse 
    {
        [Newtonsoft.Json.JsonProperty("bulkErrorResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> BulkErrorResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bulkSuccessfulResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BulkSuccessfulResults { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MethodDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceDescriptor Service { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor InputType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor OutputType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MethodOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParserUninterpretedOption 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FileDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("messageTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Descriptor> MessageTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("enumTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EnumDescriptor> EnumTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceDescriptor> Services { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldDescriptor> Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileDescriptor> Dependencies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publicDependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FileDescriptor> PublicDependencies { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("syntax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileDescriptorSyntax? Syntax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("package", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Package { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageLite 
    {
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserMessageLite ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageLite DefaultInstanceForType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StartWorkflow 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Input { get; set; }
    
        [Newtonsoft.Json.JsonProperty("inputMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Any InputMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskToDomain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> TaskToDomain { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OneofOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserOneofOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OneofOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchResultTaskSummary 
    {
        [Newtonsoft.Json.JsonProperty("totalHits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalHits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaskSummary> Results { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskSummary 
    {
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scheduledTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScheduledTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("updateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskSummaryStatus? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reasonForIncompletion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonForIncompletion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("executionTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExecutionTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("queueWaitTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? QueueWaitTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskDefName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskDefName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Input { get; set; }
    
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Output { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalInputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalInputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputPayloadStoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputPayloadStoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WorkflowPriority { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OneofDescriptor 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileDescriptor File { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor ContainingType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FieldCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldDescriptor> Fields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OneofOptions Options { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RerunWorkflowRequest 
    {
        [Newtonsoft.Json.JsonProperty("reRunFromWorkflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReRunFromWorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workflowInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> WorkflowInput { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reRunFromTaskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReRunFromTaskId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taskInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> TaskInput { get; set; }
    
        [Newtonsoft.Json.JsonProperty("correlationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExternalStorageLocation 
    {
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FileOptions 
    {
        [Newtonsoft.Json.JsonProperty("unknownFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnknownFieldSet UnknownFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initialized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Initialized { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("serializedSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SerializedSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parserForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParserFileOptions ParserForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultInstanceForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileOptions DefaultInstanceForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("javaStringCheckUtf8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaStringCheckUtf8 { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("javaPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JavaPackage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("javaPackageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString JavaPackageBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("javaOuterClassname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JavaOuterClassname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("javaOuterClassnameBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString JavaOuterClassnameBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("javaMultipleFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaMultipleFiles { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("javaGenerateEqualsAndHash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaGenerateEqualsAndHash { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("optimizeFor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileOptionsOptimizeFor? OptimizeFor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("goPackage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GoPackage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("goPackageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString GoPackageBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ccGenericServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CcGenericServices { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("javaGenericServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? JavaGenericServices { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("pyGenericServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PyGenericServices { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("phpGenericServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PhpGenericServices { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("ccEnableArenas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CcEnableArenas { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("objcClassPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjcClassPrefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objcClassPrefixBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString ObjcClassPrefixBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("csharpNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CsharpNamespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("csharpNamespaceBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString CsharpNamespaceBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("swiftPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwiftPrefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("swiftPrefixBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString SwiftPrefixBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phpClassPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhpClassPrefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phpClassPrefixBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString PhpClassPrefixBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phpNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhpNamespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phpNamespaceBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ByteString PhpNamespaceBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Deprecated { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOption> UninterpretedOptionList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionOrBuilderList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UninterpretedOptionOrBuilder> UninterpretedOptionOrBuilderList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uninterpretedOptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UninterpretedOptionCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("initializationErrorString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitializationErrorString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptorForType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Descriptor DescriptorForType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("allFieldsRaw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> AllFieldsRaw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowSummaryStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIMED_OUT")]
        TIMED_OUT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATED")]
        TERMINATED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAUSED")]
        PAUSED = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED_WITH_TERMINAL_ERROR")]
        FAILED_WITH_TERMINAL_ERROR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED_WITH_ERRORS")]
        COMPLETED_WITH_ERRORS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED")]
        SCHEDULED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIMED_OUT")]
        TIMED_OUT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskStatus2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED_WITH_TERMINAL_ERROR")]
        FAILED_WITH_TERMINAL_ERROR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED_WITH_ERRORS")]
        COMPLETED_WITH_ERRORS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED")]
        SCHEDULED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIMED_OUT")]
        TIMED_OUT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldOptionsCtype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STRING")]
        STRING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CORD")]
        CORD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STRING_PIECE")]
        STRING_PIECE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldOptionsJstype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"JS_NORMAL")]
        JS_NORMAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JS_STRING")]
        JS_STRING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JS_NUMBER")]
        JS_NUMBER = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MethodOptionsIdempotencyLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IDEMPOTENCY_UNKNOWN")]
        IDEMPOTENCY_UNKNOWN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_SIDE_EFFECTS")]
        NO_SIDE_EFFECTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IDEMPOTENT")]
        IDEMPOTENT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WorkflowStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIMED_OUT")]
        TIMED_OUT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATED")]
        TERMINATED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAUSED")]
        PAUSED = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskDefTimeoutPolicy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"RETRY")]
        RETRY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIME_OUT_WF")]
        TIME_OUT_WF = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALERT_ONLY")]
        ALERT_ONLY = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskDefRetryLogic
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPONENTIAL_BACKOFF")]
        EXPONENTIAL_BACKOFF = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskResultStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED_WITH_TERMINAL_ERROR")]
        FAILED_WITH_TERMINAL_ERROR = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Action1
    {
        [System.Runtime.Serialization.EnumMember(Value = @"start_workflow")]
        Start_workflow = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"complete_task")]
        Complete_task = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fail_task")]
        Fail_task = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldDescriptorType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INT64")]
        INT64 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UINT64")]
        UINT64 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INT32")]
        INT32 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIXED64")]
        FIXED64 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIXED32")]
        FIXED32 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOOL")]
        BOOL = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STRING")]
        STRING = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE")]
        MESSAGE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BYTES")]
        BYTES = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UINT32")]
        UINT32 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENUM")]
        ENUM = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SFIXED32")]
        SFIXED32 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SFIXED64")]
        SFIXED64 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINT32")]
        SINT32 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINT64")]
        SINT64 = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldDescriptorLiteJavaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INT")]
        INT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOOLEAN")]
        BOOLEAN = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STRING")]
        STRING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BYTE_STRING")]
        BYTE_STRING = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENUM")]
        ENUM = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE")]
        MESSAGE = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldDescriptorLiteType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INT64")]
        INT64 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UINT64")]
        UINT64 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INT32")]
        INT32 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIXED64")]
        FIXED64 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FIXED32")]
        FIXED32 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOOL")]
        BOOL = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STRING")]
        STRING = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE")]
        MESSAGE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BYTES")]
        BYTES = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UINT32")]
        UINT32 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENUM")]
        ENUM = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SFIXED32")]
        SFIXED32 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SFIXED64")]
        SFIXED64 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINT32")]
        SINT32 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINT64")]
        SINT64 = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldDescriptorJavaType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INT")]
        INT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BOOLEAN")]
        BOOLEAN = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STRING")]
        STRING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BYTE_STRING")]
        BYTE_STRING = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENUM")]
        ENUM = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MESSAGE")]
        MESSAGE = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FileDescriptorSyntax
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROTO2")]
        PROTO2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROTO3")]
        PROTO3 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskSummaryStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED_WITH_TERMINAL_ERROR")]
        FAILED_WITH_TERMINAL_ERROR = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED_WITH_ERRORS")]
        COMPLETED_WITH_ERRORS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCHEDULED")]
        SCHEDULED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TIMED_OUT")]
        TIMED_OUT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SKIPPED")]
        SKIPPED = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FileOptionsOptimizeFor
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SPEED")]
        SPEED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CODE_SIZE")]
        CODE_SIZE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LITE_RUNTIME")]
        LITE_RUNTIME = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConductorRestException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ConductorRestException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConductorRestException<TResult> : ConductorRestException
    {
        public TResult Result { get; private set; }

        public ConductorRestException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108